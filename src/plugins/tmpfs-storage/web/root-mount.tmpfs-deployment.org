#!/bin/bash
# this is the root-mount initrd-service
# which proivdes function to mount/remount the remote
# iscsi-rootfs according to the image_deployment_parameters at /mnt
#
# openQRM Enterprise developed by OPENQRM AUSTRALIA PTY LTD.
#
# All source code and content (c) Copyright 2021, OPENQRM AUSTRALIA PTY LTD unless specifically noted otherwise.
#
# This source code is released under the GNU General Public License version 2, unless otherwise agreed with OPENQRM AUSTRALIA PTY LTD.
# The latest version of this license can be found here: src/doc/LICENSE.txt
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://openqrm-enterprise.com
#
# Copyright 2021, OPENQRM AUSTRALIA PTY LTD <info@openqrm-enterprise.com>
#

# tmpfs-storage
# Required defines in the image_deploy_paramters
#
#
# Optional parameters 
#
# IMAGE_INSTALL_FROM_NFS			- can be set to an (nfs) location from
#									  which the image will be installed at
#									  deployment time
#									  syntax is : storage_id:ip_of_nfs-server:path_to_target_image
#
# IMAGE_TRANSFER_TO_NFS				- can be set to an (nfs) location from
#									  which the image will be transfered to at
#									  deployment time
#									  syntax is : storage_id:ip_of_nfs-server:path_to_target_image
#
# IMAGE_INSTALL_FROM_LOCAL			- set to a local harddisk device (e.g. /dev/hda1) this
#									  option will install the tmpfs-storage image on 
#									  boot-time from the local-device
#
# IMAGE_TRANSFER_TO_LOCAL			- set to a local harddisk device (e.g. /dev/hda1) this option will transfrom
#									  the tmpfs-storage image on boot-time to the local-device
#
#
#
# IMAGE_INSTALL_FROM_LOCAL_FS_TYPE	- set to a local harddisk device fs-type (e.g. ext3)
#
# IMAGE_TRANSFER_TO_LOCAL_FS_TYPE	- set to a local harddisk device fs-type (e.g. ext3)
#
# IMAGE_NFS_MOUNT_OPTIONS			- can be e.g. set to proto=tcp for the install/transform phase
#

# get the deployment parameters from openqrm.conf
OPENQRM_RESOURCE_PARAMETER_FILE="/var/openqrm/openqrm-resource.conf"
. $OPENQRM_RESOURCE_PARAMETER_FILE
eval $image_deployment_parameter
export OPENQRM_SERVER_BASE_DIR=$resource_basedir
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions

# nfs-options for the install+transform phase
if [ "$IMAGE_NFS_MOUNT_OPTIONS" != "" ]; then
	IMAGE_NFS_MOUNT_OPTIONS=",$IMAGE_NFS_MOUNT_OPTIONS"
fi
# default to ext3
if [ "$IMAGE_INSTALL_FROM_LOCAL_FS_TYPE" == "" ]; then
	IMAGE_INSTALL_FROM_LOCAL_FS_TYPE="ext3"
fi
if [ "$IMAGE_TRANSFER_TO_LOCAL_FS_TYPE" == "" ]; then
	IMAGE_TRANSFER_TO_LOCAL_FS_TYPE="ext3"
fi

# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
	export WGET="wget --no-check-certificate -q"
else
	export WGET="wget -q"
fi


# size from the root-device identifer
IMAGE_SIZE=$image_rootdevice"M"

# easy way to increase your tmpfs
#IMAGE_SIZE=4096M


# temp download dir
TMP_IMAGE_SIZE=1024M



#######################################################################
# required functions ##################################################
#######################################################################

function mount_rootfs() {

	mkdir -p /mnt
	mount -t tmpfs -o rw,size=$IMAGE_SIZE none /mnt
	echo "tmpfs-storage: Mounted tmpfs at /mnt rw using $IMAGE_SIZE of memory"

	if  [ "$IMAGE_INSTALL_FROM_NFS" != "" ]; then
		install_rootfs_from_nfs
	else
		echo "tmpfs-storage: Skipping install phase"
	fi
	if  [ "$IMAGE_TRANSFER_TO_NFS" != "" ]; then
		transfer_rootfs_to_nfs
	else
		echo "tmpfs-storage: Skipping transfer-to-nfs phase"
	fi
	if  [ "$IMAGE_INSTALL_FROM_LOCAL" != "" ]; then
		install_rootfs_from_local
	else
		echo "tmpfs-storage: Skipping install-from-local phase"
	fi
	if  [ "$IMAGE_TRANSFER_TO_LOCAL" != "" ]; then
		transfer_rootfs_to_local
	else
		echo "tmpfs-storage: Skipping transfer-to-local phase"
	fi
}


function remount_rootfs() {

	# Debian/Ubuntu Systems want their nfs-rootfs in rw mode
	if [ -f /mnt/etc/apt/sources.list ]; then
		if grep ubuntu /mnt/etc/apt/sources.list >/remountlog; then
			echo "tempfs-storage: Skipping Re-mount $IMAGE_SIZE ro"
			rm -f /remountlog
			return
		fi
	fi

	mount -o remount,ro,size=$IMAGE_SIZE /mnt
	echo "tmpfs-storage: Re-mounted tmpfs ro"
}


function create_fstab() {
	rm -f $IMAGE_FSTAB
	echo "none   /     tmpfs  defaults   0 0" >> $IMAGE_FSTAB
}


#######################################################################
# optional functions ##################################################
#######################################################################

function install_rootfs_from_nfs() {
	
	echo "!! starting install from nfs for tempfs !!"
	INSTALLED_THROUGH_HTTP=false
	INSTALL_TEMPLATE_NAME=`basename $IMAGE_INSTALL_FROM_NFS`
	mkdir -p /mnt2
	mount -t tmpfs -o rw,size=$TMP_IMAGE_SIZE none /mnt2

	echo "!! mounted temporary 2. tempfs"
	if $WGET -O /mnt2/image.tgz $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/tmpfs/$INSTALL_TEMPLATE_NAME.tgz; then
		echo "!! downloaded $INSTALL_TEMPLATE_NAME from $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/tmpfs/$INSTALL_TEMPLATE_NAME.tgz !!"
		if tar -C /mnt -xzf /mnt2/image.tgz; then
			echo "!! unpacked $INSTALL_TEMPLATE_NAME.tgz"
			INSTALLED_THROUGH_HTTP=true
			echo "HTTP" > /mnt/installed_from
		fi
	fi

	umount /mnt2
	rmdir /mnt2

	if [ -e /mnt/etc/network/interfaces.$appliance_name ]; then
		cp -f /mnt/etc/network/interfaces.$appliance_name /mnt/etc/network/interfaces
		
		# get the new interface up, had to specify interfaces file as not in / still in /mnt
		#ifup -a -i /mnt/etc/network/interfaces
		
		## mount additional fstab-static entries
		#mount wont work, still in /mnt
		#mount -a
	fi

        echo "tmpfs-storage: Adding hostname $appliance_name to /etc/hostname"
        echo "$appliance_name" > /mnt/etc/hostname

	if [ "$INSTALLED_THROUGH_HTTP" == "true" ]; then
	
		##kill drop bear
                        killall dropbear 1>/dev/null 2>&1
                        for OPENQRM_DROPBEAR_PID in `ps ax 2>/dev/null | grep dropbear | grep -v grep | awk {' print $1 '}`; do
                                echo "Killing Dropbear PID: $OPENQRM_DROPBEAR_PID"
                                /bin/kill $OPENQRM_DROPBEAR_PID
                        done
		##end kill drop bear
	
	
		echo "NFS" > /mnt/installed_from
		return 0
	fi

	echo "!! Install from http failed! Installing from NFS !!"

	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	STORAGE_ID=`echo $IMAGE_INSTALL_FROM_NFS | cut -d':' -f1`
	IMAGE_INSTALL_FROM_NFS=`echo $IMAGE_INSTALL_FROM_NFS | cut -d':' -f2-`

	echo "tmpfs-storage: Installing $resource_image from $IMAGE_INSTALL_FROM_NFS ($STORAGE_ID)"
	mkdir -p /mnt2
	if ! mount -t nfs -o ro$IMAGE_NFS_MOUNT_OPTIONS $IMAGE_INSTALL_FROM_NFS /mnt2; then
		echo "ERROR: Could not mount $IMAGE_INSTALL_FROM_NFS by nfs"
		# give a shell for the admin
		/bin/bash
	fi

	echo "tmpfs-storage: Starting install-from-nfs phase. This can take a while ...."
	rsync -aq /mnt2/* /mnt/

	echo "tmpfs-storage: Install-from-nfs phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
	if [ -e /mnt/etc/network/interfaces.$appliance_name ]; then
		cp -f /mnt/etc/network/interfaces.$appliance_name /mnt/etc/network/interfaces
		# get the new interface up
		ifup -a
		# mount additional fstab-static entries
		mount -a
	fi

	echo "tmpfs-storage: Adding hostname $appliance_name to /etc/hostname"
	echo "$appliance_name" > /mnt/etc/hostname

	openqrm_portmap_stop
	echo "NFS" > /mnt/installed_from 
}


function transfer_rootfs_to_nfs() {
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	STORAGE_ID=`echo $IMAGE_TRANSFER_TO_NFS | cut -d':' -f1`
	IMAGE_TRANSFER_TO_NFS=`echo $IMAGE_TRANSFER_TO_NFS | cut -d':' -f2-`
	echo "tmpfs-storage: Transfering $resource_image to $IMAGE_TRANSFER_TO_NFS ($STORAGE_ID)"
	mkdir -p /mnt2
	if ! mount -t nfs -o rw$IMAGE_NFS_MOUNT_OPTIONS $IMAGE_TRANSFER_TO_NFS /mnt2; then
		echo "ERROR: Could not mount $IMAGE_TRANSFER_TO_NFS by nfs"
		# give a shell for the admin
		/bin/bash
	fi
	echo "tmpfs-storage: Starting transfer-to-nfs phase. This can take a while ...."
	rsync -aq /mnt/* /mnt2/
	echo "tmpfs-storage: Transfer-to-nfs phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
	openqrm_portmap_stop
}


function install_rootfs_from_local() {
	modprobe ext3 1>/dev/null 2>&1
	mkdir -p /mnt2
	if ! mount -t $IMAGE_INSTALL_FROM_LOCAL_FS_TYPE -o ro $IMAGE_INSTALL_FROM_LOCAL /mnt2; then
		echo "ERROR: Could not mount $IMAGE_INSTALL_FROM_LOCAL / $IMAGE_INSTALL_FROM_LOCAL_FS_TYPE"
		# give a shell for the admin
		/bin/bash
	fi
	echo "tmpfs-storage: Starting install-to-local phase. This can take a while ...."
	rsync -aq /mnt2/* /mnt/
	echo "tmpfs-storage: Install-to-local phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
}


function transfer_rootfs_to_local() {
	modprobe ext3 1>/dev/null 2>&1
	mkdir -p /mnt2
	if ! mount -t $IMAGE_TRANSFER_TO_LOCAL_FS_TYPE -o rw $IMAGE_TRANSFER_TO_LOCAL /mnt2; then
		echo "ERROR: Could not mount $IMAGE_TRANSFER_TO_LOCAL / $IMAGE_TRANSFER_TO_LOCAL_FS_TYPE"
		# give a shell for the admin
		/bin/bash
	fi
	echo "tmpfs-storage: Starting transfer-to-local phase. This can take a while ...."
	rsync -aq /mnt/* /mnt2/
	echo "tmpfs-storage: Transfer-to-local phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
}



